<?php

namespace App\Http\Controllers\Api\V1;

use App\Http\Controllers\Controller;
use App\Models\AutoEmbedUrls;
use App\Models\Serie;
use Illuminate\Http\Request;
use App\Models\EpisodePlayLink;

class SerieApiController extends Controller
{
    public function index()
    {
        $series = Serie::with('genres')
            ->orderByDesc('id')
            ->get();

        return response()->json($series);
    }

    public function show($id)
    {
        $serie = Serie::with('genres')->findOrFail($id);

        $contentType = $serie->content_type;
        $genres = $serie->genres;

        $relatedSeries = Serie::whereHas('genres', function ($query) use ($genres) {
            $query->whereIn('genres.id', $genres->pluck('id'));
        })
            ->where('id', '!=', $serie->id)
            ->with('genres')
            ->latest()
            ->limit(10)
            ->get();

        // AutoEmbeds para série
        $autoEmbeds = AutoEmbedUrls::where('active', true)
            ->whereIn('content_type', ['serie', 'both']) // ✅ isso filtra apenas embeds para episódios
            ->orderBy('order')
            ->get();

        $seasons = $serie->seasons()
            ->with(['episodes' => function ($query) {
                $query->orderBy('episode_number')->with('playLinks');
            }])
            ->orderBy('season_number')
            ->get();

        // Agora, adicionamos os autoembeds por episódio
        foreach ($seasons as $season) {
            foreach ($season->episodes as $episode) {
                $autoGeneratedLinks = $autoEmbeds->map(function ($embed) use ($serie, $season, $episode) {
                    $url = $embed->url;
                    $idType = null;

                    if (str_contains($url, '{imdb_id}')) {
                        $url = str_replace('{imdb_id}', $serie->imdb_id, $url);
                        $idType = 'imdb';
                    }
                    if (str_contains($url, '{tmdb_id}')) {
                        $url = str_replace('{tmdb_id}', $serie->tmdb_id, $url);
                        $idType = 'tmdb';
                    }

                    // Substitui {season} e {episode} se existirem
                    $url = str_replace('{season}', $season->season_number, $url);
                    $url = str_replace('{episode}', $episode->episode_number, $url);

                    return [
                        'id' => null,
                        'episode_id' => $episode->id,
                        'name' => $embed->name,
                        'quality' => $embed->quality,
                        'order' => $embed->order,
                        'url' => trim($url), // remove espaços ou \n no final
                        'type' => $embed->type,
                        'player_sub' => $embed->player_sub,
                        'auto' => true,
                        'id_type' => $idType,
                        'content_type' => 'serie', // ✅ Adiciona isso aqui
                    ];
                });

                // Junta os links reais com os auto
                $episode->all_links = collect($episode->playLinks)->merge($autoGeneratedLinks)->values();
                unset($episode->playLinks); // opcional: remove o campo playLinks antigo
            }
        }

        return response()->json([
            'serie' => $serie,
            'seasons' => $seasons,
            'related' => $relatedSeries,
            'content_type' => $contentType
        ]);
    }
}
